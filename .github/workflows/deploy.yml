name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.9'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(node -p "require('./package.json').version")-${GITHUB_SHA::8}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
    - name: Install dependencies
      run: |
        npm ci
        pip install -r services/mt5-service/requirements.txt
        
    - name: Run tests
      run: |
        npm run lint
        npm run typecheck
        npm run test:coverage
        
    - name: Build applications
      run: |
        NODE_ENV=production npm run build
        
    - name: Create deployment package
      run: |
        mkdir -p dist
        
        # Copy built applications
        cp -r apps/frontend/dist dist/frontend
        cp -r apps/api/dist dist/api
        
        # Copy necessary files
        cp package.json dist/
        cp -r packages dist/
        cp -r services dist/
        
        # Copy configuration files
        cp .env.example dist/
        cp start.js dist/
        cp backup-system.js dist/
        cp health-check.js dist/
        
        # Create version file
        echo "${{ steps.version.outputs.version }}" > dist/VERSION
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ steps.version.outputs.version }}
        path: dist/
        retention-days: 30

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-${{ needs.build.outputs.version }}
        path: dist/
        
    - name: Deploy to staging
      run: |
        echo "Deploying version ${{ needs.build.outputs.version }} to staging..."
        
        # Here you would add your actual deployment commands
        # Examples:
        # - Upload to S3/CDN
        # - Deploy to AWS ECS/Lambda
        # - Update Kubernetes deployments
        # - Deploy to VPS via SSH
        
        echo "Staging deployment completed"
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        
        # Add smoke test commands here
        # curl -f https://staging.tradeinsight.com/api/health
        
        echo "Smoke tests passed"
        
    - name: Notify deployment
      run: |
        echo "Staging deployment successful: ${{ needs.build.outputs.version }}"

  deploy-production:
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-${{ needs.build.outputs.version }}
        path: dist/
        
    - name: Deploy to production
      run: |
        echo "Deploying version ${{ needs.build.outputs.version }} to production..."
        
        # Production deployment commands
        # These should be more careful and include:
        # - Blue/green deployment
        # - Database migrations
        # - Health checks
        # - Rollback capability
        
        echo "Production deployment completed"
        
    - name: Run production smoke tests
      run: |
        echo "Running smoke tests against production..."
        
        # Production smoke tests
        # curl -f https://tradeinsight.com/api/health
        
        echo "Production smoke tests passed"
        
    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this release
          - Automated release for version ${{ needs.build.outputs.version }}
          
          ## Deployment
          - ✅ Staging: Deployed and tested
          - ✅ Production: Deployed and verified
          
        draft: false
        prerelease: false